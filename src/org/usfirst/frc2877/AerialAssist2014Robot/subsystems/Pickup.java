// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2877.AerialAssist2014Robot.subsystems;

import org.usfirst.frc2877.AerialAssist2014Robot.RobotMap;
import org.usfirst.frc2877.AerialAssist2014Robot.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;

/**
 *
 */
public class Pickup extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar rollerJag = RobotMap.pickupRollerJag;
    DoubleSolenoid pickupSolenoid = RobotMap.pickupPickupSolenoid;
    DoubleSolenoid catchSolenoid = RobotMap.pickupCatchSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    //Run the pickup roller
    public void runRoller(int state) {
        //set to 0 to do nothing
        //1 and -1 set the rollers to go forward and reverse
        //Not necessarily in that order.
        try {
            rollerJag.setX(state);
        } catch (edu.wpi.first.wpilibj.can.CANTimeoutException ex) {
            System.out.println("Timeout Exception on ");
        }
    }

    //Open the pickup - brings it out
    public void openPickup() {
        pickupSolenoid.set(DoubleSolenoid.Value.kForward);
        Robot.currentMoles -= Robot.molesOfAir(Robot.PICKUP_VOLUME);
        Robot.armIsOpen = true;
        SmartDashboard.putString("Pickup", "Open");
    }

    //Close the pickup - brings it in
    public void closePickup() {
        pickupSolenoid.set(DoubleSolenoid.Value.kReverse);
        Robot.armIsOpen = false;
        Robot.currentMoles -= Robot.molesOfAir(Robot.PICKUP_VOLUME);
        SmartDashboard.putString("Pickup", "Close");
    }

    //Turn off the pickup - maintains current position
    public void offPickup() {
        pickupSolenoid.set(DoubleSolenoid.Value.kOff);
    }

    //Open the catch - brings out the secondary arm
    public void openSecondary() {
        catchSolenoid.set(DoubleSolenoid.Value.kForward);
        Robot.currentMoles -= Robot.molesOfAir(Robot.PICKUP_VOLUME);
        SmartDashboard.putString("Catch", "Open");
    }

    //Close the catch - brings in the secondary arm
    public void closeSecondary() {
        catchSolenoid.set(DoubleSolenoid.Value.kReverse);
        Robot.currentMoles -= Robot.molesOfAir(Robot.PICKUP_VOLUME);
        SmartDashboard.putString("Catch", "Close");
    }
    
    //Open both the pickup and secondary arms
    public void openWide() {
        //This function is a shortcut to open everything.
        openSecondary();
        openPickup();
    }

    //Close the pickup and secondary arms
    public void shutUp() {
        //But... but...
        closeSecondary();
        closePickup();
    }
}
