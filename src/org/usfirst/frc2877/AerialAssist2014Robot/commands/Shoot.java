// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.AerialAssist2014Robot.commands;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;
import org.usfirst.frc2877.AerialAssist2014Robot.RobotMap;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Pickup;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Shooter;

/**
 *
 */
public class  Shoot extends Command {
   

Shooter theSubst = Robot.shooter;
Pickup thePickup = Robot.pickup;
int theTimer=0,someValue=10;
    public Shoot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        
        //open the arms so we have space to shoot them in!
        thePickup.openWide();
        
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
       //TODO wait for arms to open before kicking 
        
       ///USE 2 PISTONS 
       theSubst.KickActivate();
       //left and right are already activated, so we don't set them.
       
       //We wait a little bit before unkicking; by then we have enough momentum.
       //someValue can be changed to modify the timer.
        theTimer++;
        if(theTimer < someValue){
           theSubst.unKick();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return theTimer > someValue;
    }

    // Called once after isFinished returns true
    protected void end() {
        theSubst.unKick();
        theSubst.dualDeactivate();
        theSubst.dualActivate();
        thePickup.shutUp(); //SHUT UP I'M SHOOTING HERE
        //TODO mover camera back to pickup position
        // TODO don't forget to set the flag
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        
        //Ungrateful little...
        end();
    }
}
