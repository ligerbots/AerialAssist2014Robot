// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2877.AerialAssist2014Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Pickup;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Shooter;

/**
 *
 */
public class Shoot extends Command {

    Shooter theSubst = Robot.shooter;
    Pickup thePickup = Robot.pickup;
    //DoubleSolenoid theOtherPiston = RobotMap.shooterRightSolenoidShoot;
    int theTimer = 0, maxTime = 100;

    public Shoot() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        //MOVE OUTTA THE WAY IM LOBBIN DIS BALL HERE
        if (Robot.armIsOpen == false) {
            thePickup.openWide();
            Robot.armIsOpen = true;
        }
        theSubst.shootActivate();
        //Let the shooter build up some force
        try {
            Thread.currentThread().sleep(250);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //Use 1 piston
        theSubst.kickActivate();
        theTimer++;
        if (theTimer > maxTime) {
            theSubst.kickDeactivate();
        }
    }

    //Ends the command when the timer has reached the end of its time
    protected boolean isFinished() {
        return theTimer > maxTime;
    }

    protected void end() {
        theSubst.kickDeactivate();
        theSubst.shootDeactivate();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
