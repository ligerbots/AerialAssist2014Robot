// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2877.AerialAssist2014Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Pickup;
import org.usfirst.frc2877.AerialAssist2014Robot.subsystems.Shooter;

/**
 *
 */
public class Shoot extends Command {

    Shooter theSubst = Robot.shooter;
    Pickup thePickup = Robot.pickup;
    //DoubleSolenoid theOtherPiston = RobotMap.shooterRightSolenoidShoot;
    int theTimer = 0;
    int armMoveTime=25,shootChargeTime=13,kickTime = 100;
    //At 50fps, this is the amount of cycles per thing.
    //We take armMoveTime ticks (to move the arms out of the way) before charging the shooter for shootChargeTime ticks
    //And then kicking for kickTime ticks.

    public Shoot() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pickup);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        //MOVE OUTTA THE WAY IM LOBBIN DIS BALL HERE
        if (Robot.armIsOpen == false) {
            thePickup.openWide();
            Robot.armIsOpen = true;
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        theTimer++;
        //First, we wait for 25 ticks (50fps; half a second)
        if(theTimer == armMoveTime){
            //if the arms have moved out of the way, start charging force
            //We could charge the shooter while moving the arms, but if it accidentally triggered
            //it would be disastrous.
             theSubst.shootActivate();
        }
        if(theTimer == armMoveTime + shootChargeTime){
            //We wait a bit before activating this so that we can get MOAR AIR POWER
            theSubst.kickActivate();
        }
        
        if (theTimer > kickTime + armMoveTime+shootChargeTime) {
            //and after we've given it enough time to kick, deactivate the kicker. We're done.
            theSubst.kickDeactivate();
        }
    }

    //Ends the command when the timer has reached the end of its time
    protected boolean isFinished() {
        return theTimer > kickTime+ armMoveTime+shootChargeTime;
    }

    protected void end() {
        theSubst.kickDeactivate();
        theSubst.shootDeactivate();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
