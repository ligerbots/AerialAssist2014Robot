// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2877.AerialAssist2014Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.AerialAssist2014Robot.Robot;
import org.usfirst.frc2877.AerialAssist2014Robot.RobotMap;


/**
 *
 */
public class Turn90 extends Command {
    int m_leftTime = 0; //150 = 50 (ticks/second) * 3 (seconds)
    double m_targetAngle = 90, m_gyro_start; //gets overridden
    static double coarseTurn = 75.0;
    static double lowSpeed = 0.75;
    static double fullSpeed = 1.0;
    static int maxTime = 60;

    public Turn90(double angle) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        m_targetAngle = angle;
         System.out.println("Turn90 initialized for " + m_targetAngle + " degrees.");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        m_leftTime = 0;
        //RobotMap.driveTrainGyro.reset();
        m_gyro_start = Robot.driveTrain.getCurrentAngle();
        System.out.println("Turn started for " + m_targetAngle + " degrees. Gyro start: " + m_gyro_start);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double gyroAngle, gyroAngle1 = Robot.driveTrain.getCurrentAngle();
        gyroAngle = gyroAngle1 - m_gyro_start;
        double gyroDriveSpeed;
        
        if (m_targetAngle > 0)
        {
            // gyroDriveSpeed starts out at max and then reduces as we get
            // close to target
            gyroDriveSpeed = fullSpeed * (m_targetAngle - gyroAngle) / m_targetAngle;
            // don't let speed get too slow or we will stop turning too soon
            if (gyroDriveSpeed < lowSpeed) {
                gyroDriveSpeed = lowSpeed;
            }
        }
        else
        {
            // gyroDriveSpeed starts out at -1.0 and then increases as we get
            // close to target
            // For example if m_targetAngle = -90 and we have turned -45 degrees
            // then gyroDriveSpeed = (-90 - -45)/-(-90) = -0.5
            gyroDriveSpeed = fullSpeed * (m_targetAngle - gyroAngle) / -m_targetAngle;
            if (gyroDriveSpeed > -lowSpeed) {
                gyroDriveSpeed = -lowSpeed;
            }
        }
        
        Robot.driveTrain.drive(gyroDriveSpeed, 0);
        m_leftTime++;
        if (m_leftTime % 3 == 0)
        {
            System.out.println("                    gryoAngle1: " + gyroAngle1 + " m_gyro_start: " + m_gyro_start); 
            System.out.println("Gyro angle:" + gyroAngle + " Turnspeed: " + gyroDriveSpeed + " m_gyro_start: " + m_gyro_start);
        }
    }


       // As far as we can tell, using PID to do these 90 turns is unnecessary.
    // However, if we can figure out how to do that eventually, it might be
    // smoother.


// Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        double gyroAngle, gyroAngle1 = Robot.driveTrain.getCurrentAngle();
        gyroAngle = gyroAngle1 - m_gyro_start;
        boolean isFinished;
        if (m_targetAngle > 0)
        {
            isFinished = gyroAngle + Robot.OVERSHOOT_ANGLE_POSITIVE > m_targetAngle;
        }
        else
        {
            // e.g. once (-76 - 15) < -90 we're done
            isFinished = gyroAngle - Robot.OVERSHOOT_ANGLE_NEGATIVE < m_targetAngle;
        }
        
        if (isFinished) {
            System.out.println("gryoAngle1: " + gyroAngle1 + " m_gyro_start: " + m_gyro_start);
            System.out.println("Turn90 Finished");
        } 
        else if (m_leftTime >= maxTime)
        {
            isFinished = true;
            System.out.println("************** Turn90 TIMED OUT ************");
        }
        return isFinished;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.drive(0, 0);
        Robot.drive.start();        // must restart driving!!
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
